<?php

/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function train_scotchamp2012_permission() {
  return array(
    'sct scotchamp2012' => array(
      'title' => t('Best times 2012'),
      'description' => t('Per each competitive distance'),
    ),
  );
}




function train_scotchamp2012_menu() {
  $items = array();
  $items['sct/train_scotchamp2012/best'] = array(
    'title' => t('Scottish Master Championships 2012'),
    'description' => t('Scottish Championships 2012'),
  // 'access callback' => TRUE,
    'page callback' => 'train_scotchamp2012_annual',
    'access arguments' => array('sct scotchamp2012'),
   'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

// This function gets called in the browser address bar for:
//"http://yourhost/my_module/form" or
//"http://yourhost/?q=my_module/form". It will generate// a page with //this form on it.
/*
function train_entry_data() {

  // This form calls the form builder function via the
  // drupal_get_form() function which takes the name of this form builder
  // function as an argument. It returns the results to display the form.
return drupal_get_form('train_entry_my_form');

}
*/

/*
function train_swimview_control() {


//train_swimview_annual(); 

train_swimview_data();

}
*/


function pb_scotchampquery($suid) {

// start query swimmer details on UID masterID and get event and split info from there.

// on an annual basis, per stroke, per distance get swim data.


/*
$query = db_select('swim_data', 'sd');
$query->condition('uid', $suid);
$query->condition('session_type', 'competition');
$query->condition('setdate', array($start2012, $end2012), 'BETWEEN');
$query->join('set_swim', 'ss', 'sd.setid = ss.setid');  // AND ss.setid = :ssuid', array(':ssuid' => 5))
//->condition('setid', $setid)
$query->fields('sd', array('repid', 'splitid', 'time_recorded', 'pulse_recorded', 'stroke_count'))
->fields('ss', array('setid', 'setdate', 'set_type', 'poolsize', 'session_type', 'stroke_type', 'swim_type', 'swim_distance', 'split_distance'));

//print_r($query);
$resultb = $query->execute();
//print_r($resultb);
$setssetb = $resultb->fetchAll();//fetchobject(); 
//print_r($setssetb);
*/
$query = db_select('mastersid', 'mid');
$query->condition('uid', $suid);
$query->fields('mid', array('mastersid'));
//print_r($query);
$resultb = $query->execute();
//print_r($resultb);
$mid = $resultb->fetchobject();
//print_r($mid);
//$mid->mastersid = 'PENDING';
// query to get swimmer event and splits
$query = db_select('tidyswimmer', 'tswim');
$query->condition('letter', $mid->mastersid);
$query->join('tidyevent', 'te', 'tswim.rowid = te.rowid'); 
$query->join('tidysplits', 'ts', 'tswim.rowid = ts.rowid'); 
$query->fields('tswim', array('rowid', 'letter'));
$query->fields('te', array('distance', 'strokeid'));
$query->fields('ts', array('splitid', 'splittime'));
//print_r($query);
$resultbc = $query->execute();
//print_r($resultb);
$champdata = $resultbc->fetchAll();
//print_r($champdata);

// get the splits into seperate array
foreach($champdata as $did=>$swimperdata)
{

$rowids[$swimperdata->rowid][] = $swimperdata->splittime;
}
//echo 'rowandsplittimes';
//print_r($rowids);

//work out the split time value compared to the previous
foreach($rowids as $srowid=>$accsplit)
{

	foreach($accsplit as $spid=>$sad)
	{
		// if first split, not diff sum to do,
		if($spid == '0')
		{
		$splitdiff[$srowid][$spid] = $sad;
		}
		else
		{
		$splitdiff[$srowid][$spid] = $sad - $accsplit[$spid-1];
		
		}                                   
	}

}
//echo 'thespiltsdifference';
//print_r($splitdiff);

//combine the splits array to form dat aready for table layout
foreach($champdata as $did=>$swimperdata)
{
	foreach($swimperdata as $datatype=>$swvalue)
	{
	$chapdataready[$did][$datatype] =  $swvalue;

		if($datatype == 'splitid' )
		{
		//current difference
		$currsdiff = $splitdiff[$chapdataready[$did]['rowid']][($swvalue-1)] ;
		//previsous differnce
			if($chapdataready[$did]['splitid'] > 1 )
			{
			$prevsdiff = $chapdataready[$did-1]['dsplit'];
			// percentage change
			$perchangediff = round(((($currsdiff -$prevsdiff )/$prevsdiff)*100), 1);
			}
			else
			{
			$perchangediff ='---';
			}
			
		$chapdataready[$did]['dsplit'] =  $currsdiff;
		$chapdataready[$did]['%_change'] =  $perchangediff;
		}

	}

}
//echo 'allthedatayeehaaa';
//print_r($chapdataready);

$strokes = array('1'=>'freestyle', '2'=>'backcrawl', '3'=>'breaststroke', '4'=>'butterfly', '5'=>'im');

//print_r($quicktime);
$chapdataready['splits'] = $rowids;
$chapdataready['strokes'] = $strokes;

return $chapdataready;

}


function train_scotchamp2012_annual() {

// get the data for the table.
// get the current userid
$cursuid = user_uid_optional_load($uid = NULL);
//print_r($cursuid);
//$cursuid->uid = 13;
$swimchampsin =  pb_scotchampquery($cursuid->uid);
//print_r($swimdataannual);

$strokesin = $swimchampsin['strokes'];
unset($swimchampsin['strokes']);

$header = array('Date', 'Stroke', 'Distance', 'Split', 'Time', ' Diff Split', '% change');

$i  = 1;
	
	foreach($swimchampsin as $sdataid=>$chdata)
	{
		$displaydate = 'April 21 2012';	
		$timeformat = dectotimesc($chdata['splittime']);
	
		$i = $i + 1;
		
		$rows[$i] = array($displaydate,  $strokesin[$chdata['strokeid']],  $chdata['distance'], $chdata['splitid'], $timeformat, $chdata['dsplit'], $chdata['%_change'].'%');
		

	}
//print_r($rows);
  // Output of table with the paging
  $outputa = theme_table(
    array(
      "header" => $header,
      "rows" => $rows,
      "attributes" => array(),
      "sticky" => true, // Table header will be sticky
      "caption" => "",
      "colgroups" => array(),
      "empty" => t("Table has no row!") // The message to be displayed if table is empty
    )
  ).theme("pager");
 
  return $outputa;
//return $swimmerdata;


}


function dectotimesc($dectimein)
{

$wholeminutes = floor($dectimein);
//echo 'whole'.$wholeminutes;
$hundredths = explode(".", $dectimein);//$dectimein - $wholeminutes;
//echo 'hundred'.$hundredths[1];
$minutes = floor($wholeminutes/60);
//echo 'minutes'.$minutes;
$seconds = $wholeminutes - ($minutes * 60);
if(strlen($seconds) == 1)
{
$secondstwo = '0'.$seconds;
}
else
{
$secondstwo = $seconds;
}

//echo 'seconds'.$seconds;

$timeformat = $minutes.'.'.$secondstwo.'.'.$hundredths[1];

return $timeformat;

}



