<?php

/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function train_swimview_permission() {
  return array(
    'sct swimview' => array(
      'title' => t('swimmer data view'),
      'description' => t('Only for individual swimmer'),
    ),
  );
}




function train_swimview_menu() {
  $items = array();
  $items['sct/train_swimview/data'] = array(
    'title' => t('Swimmer data view'),
    'description' => t('Swimmer view'),
  // 'access callback' => TRUE,
    'page callback' => 'train_swimview_data',
    'access arguments' => array('sct swimview'),
   'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

// This function gets called in the browser address bar for:
//"http://yourhost/my_module/form" or
//"http://yourhost/?q=my_module/form". It will generate// a page with //this form on it.
/*
function train_entry_data() {

  // This form calls the form builder function via the
  // drupal_get_form() function which takes the name of this form builder
  // function as an argument. It returns the results to display the form.
return drupal_get_form('train_entry_my_form');

}
*/



function swimdataquery ($suid)
{

// first need to get the unique ids of the sets the swimmer as data for
$query = db_select('set_swim', 'ss');

$query
->condition('setid', $suid)
->distinct()
->fields('ss', array('setid'));
//print_r($query);
$result = $query->execute();
//print_r($resultb);
$swimmersets = $result->fetchobject(); 
//print_r($query);
//print_r($swimmersets);


// given that list get the set info. and join that to the swim_data (or perform a seperate query)

$query = db_select('swim_data', 'sd');
$query->condition('uid', $suid);
$query->join('set_swim', 'ss', 'sd.setid = ss.setid');  // AND ss.setid = :ssuid', array(':ssuid' => 5))
//->condition('setid', $setid)
$query->fields('sd', array('repid', 'splitid', 'time_recorded', 'pulse_recorded', 'stroke_count'))
->fields('ss', array('setid', 'setdate', 'set_type', 'poolsize', 'session_type', 'stroke_type', 'swim_type', 'swim_distance', 'split_distance'));

//print_r($query);
$resultb = $query->execute();
//print_r($resultb);
$setssetb = $resultb->fetchAll();//fetchobject(); 
//print_r($query);
//print_r($setssetb);

return $setssetb;

}


function train_swimview_data() {

//$swimmerdata = array('#markup' => '<p>' . t('The swimmers view of the competition and training data.') . '</p>');

// get the data for the table.
// get the current userid
$cursuid = user_uid_optional_load($uid = NULL);
//print_r($cursuid);
 $swimdatai = swimdataquery ($cursuid->uid);
//print_r($swimdatai);

$header = array('Date', 'Context', 'Set', 'Stroke', 'Swim style', 'Distance', 'Split Distance', 'Rep', 'Time', 'Pulse', 'Stroke Count');

$settype = array('1' => 'warmup', '2' => 'main', '3' => 'warmdown');
	
	foreach($swimdatai as $rid=>$rvalue)
	{
	$displaydate = date("F j, Y ", $rvalue->setdate);	
		
	$rows[$rid] = array($displaydate, $rvalue->session_type, $settype[$rvalue->set_type], $rvalue->stroke_type,  $rvalue->swim_type, $rvalue->swim_distance, $rvalue->split_distance, $rvalue->repid, $rvalue->time_recorded, $rvalue->pulse_recorded, $rvalue->stroke_count);

	}

  // Output of table with the paging
  $output = theme_table(
    array(
      "header" => $header,
      "rows" => $rows,
      "attributes" => array(),
      "sticky" => true, // Table header will be sticky
      "caption" => "",
      "colgroups" => array(),
      "empty" => t("Table has no row!") // The message to be displayed if table is empty
    )
  ).theme("pager");
 
  return $output;


//return $swimmerdata;


}



